/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => WindowCollapse
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var WindowCollapse = class extends import_obsidian.Plugin {
  onload() {
    return __async(this, null, function* () {
      this.addCommand({
        id: "duplicate-line",
        name: "Duplicate Line",
        editorCallback: (editor) => this.duplicateLine(editor)
      });
    });
  }
  duplicateLine(editor) {
    const cursors = editor.listSelections();
    let addedLines = 0;
    const selections = [];
    cursors.forEach((cursor) => {
      let lineContent = "";
      let lineNumber = 0;
      const head = cursor.head.line;
      const anchor = cursor.anchor.line;
      const headChar = cursor.head.ch;
      const anchorChar = cursor.anchor.ch;
      if (head == anchor) {
        lineNumber = head + addedLines;
        lineContent = editor.getLine(lineNumber);
        if (!lineContent) {
          return;
        }
        addedLines++;
        const lineContent1 = lineContent + "\n" + lineContent;
        editor.replaceRange(lineContent1, { line: lineNumber, ch: 0 }, { line: lineNumber, ch: lineContent.length });
      } else {
        let totalContent = "";
        const lastLine = Math.max(head, anchor) + addedLines;
        const firstLine = Math.min(head, anchor) + addedLines;
        const linesRange = Math.abs(head - anchor);
        for (let i = 0; i <= linesRange; i++) {
          const activeLine = firstLine + i;
          lineContent = editor.getLine(activeLine);
          if (i !== linesRange)
            totalContent += lineContent + "\n";
          else
            totalContent += lineContent;
        }
        addedLines += linesRange + 1;
        const lastLineContent = editor.getLine(lastLine);
        const lineContent1 = lastLineContent + "\n" + totalContent;
        editor.replaceRange(lineContent1, { line: lastLine, ch: 0 }, { line: lastLine, ch: lastLineContent.length });
      }
      selections.push({
        anchor: { line: anchor + addedLines, ch: anchorChar },
        head: { line: head + addedLines, ch: headChar }
      });
    });
    editor.setSelection({ line: 0, ch: 0 }, { line: 0, ch: 0 });
    editor.setSelections(selections);
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IHsgRWRpdG9yLCBFZGl0b3JTZWxlY3Rpb25PckNhcmV0LCBQbHVnaW4gfSBmcm9tIFwib2JzaWRpYW5cIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgV2luZG93Q29sbGFwc2UgZXh0ZW5kcyBQbHVnaW4ge1xuXHRhc3luYyBvbmxvYWQoKSB7XG5cdFx0dGhpcy5hZGRDb21tYW5kKHtcblx0XHRcdGlkOiBcImR1cGxpY2F0ZS1saW5lXCIsXG5cdFx0XHRuYW1lOiBcIkR1cGxpY2F0ZSBMaW5lXCIsXG5cdFx0XHRlZGl0b3JDYWxsYmFjazogKGVkaXRvcikgPT4gdGhpcy5kdXBsaWNhdGVMaW5lKGVkaXRvciksXG5cdFx0fSk7XG5cdH1cblx0ZHVwbGljYXRlTGluZShlZGl0b3I6IEVkaXRvcikge1xuXHRcdGNvbnN0IGN1cnNvcnMgPSBlZGl0b3IubGlzdFNlbGVjdGlvbnMoKTsgLy9tdWx0aWN1cnNvcnNcblx0XHRsZXQgYWRkZWRMaW5lcyA9IDA7XG5cdFx0Y29uc3Qgc2VsZWN0aW9uczogRWRpdG9yU2VsZWN0aW9uT3JDYXJldFtdID0gW107XG5cdFx0Y3Vyc29ycy5mb3JFYWNoKChjdXJzb3IpID0+IHtcblx0XHRcdGxldCBsaW5lQ29udGVudCA9IFwiXCI7XG5cdFx0XHRsZXQgbGluZU51bWJlciA9IDA7XG5cdFx0XHRjb25zdCBoZWFkID0gY3Vyc29yLmhlYWQubGluZTtcblx0XHRcdGNvbnN0IGFuY2hvciA9IGN1cnNvci5hbmNob3IubGluZTtcblx0XHRcdGNvbnN0IGhlYWRDaGFyID0gY3Vyc29yLmhlYWQuY2g7XG5cdFx0XHRjb25zdCBhbmNob3JDaGFyID0gY3Vyc29yLmFuY2hvci5jaDtcblx0XHRcdGlmIChoZWFkID09IGFuY2hvcikge1xuXHRcdFx0XHRsaW5lTnVtYmVyID0gaGVhZCArIGFkZGVkTGluZXM7XG5cdFx0XHRcdGxpbmVDb250ZW50ID0gZWRpdG9yLmdldExpbmUobGluZU51bWJlcik7XG5cdFx0XHRcdGlmICghbGluZUNvbnRlbnQpIHtcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH1cblx0XHRcdFx0YWRkZWRMaW5lcysrO1xuXHRcdFx0XHRjb25zdCBsaW5lQ29udGVudDEgPSBsaW5lQ29udGVudCArIFwiXFxuXCIgKyBsaW5lQ29udGVudDtcblx0XHRcdFx0ZWRpdG9yLnJlcGxhY2VSYW5nZShcblx0XHRcdFx0XHRsaW5lQ29udGVudDEsXG5cdFx0XHRcdFx0eyBsaW5lOiBsaW5lTnVtYmVyLCBjaDogMCB9LFxuXHRcdFx0XHRcdHsgbGluZTogbGluZU51bWJlciwgY2g6IGxpbmVDb250ZW50Lmxlbmd0aCB9XG5cdFx0XHRcdCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRsZXQgdG90YWxDb250ZW50ID0gXCJcIjtcblx0XHRcdFx0Y29uc3QgbGFzdExpbmUgPSBNYXRoLm1heChoZWFkLCBhbmNob3IpICsgYWRkZWRMaW5lcztcblx0XHRcdFx0Y29uc3QgZmlyc3RMaW5lID0gTWF0aC5taW4oaGVhZCwgYW5jaG9yKSArIGFkZGVkTGluZXM7XG5cdFx0XHRcdGNvbnN0IGxpbmVzUmFuZ2UgPSBNYXRoLmFicyhoZWFkIC0gYW5jaG9yKTtcblxuXHRcdFx0XHRmb3IgKGxldCBpID0gMDsgaSA8PSBsaW5lc1JhbmdlOyBpKyspIHtcblx0XHRcdFx0XHRjb25zdCBhY3RpdmVMaW5lID0gZmlyc3RMaW5lICsgaTtcblx0XHRcdFx0XHRsaW5lQ29udGVudCA9IGVkaXRvci5nZXRMaW5lKGFjdGl2ZUxpbmUpO1xuXHRcdFx0XHRcdGlmIChpICE9PSBsaW5lc1JhbmdlKSB0b3RhbENvbnRlbnQgKz0gbGluZUNvbnRlbnQgKyBcIlxcblwiO1xuXHRcdFx0XHRcdGVsc2UgdG90YWxDb250ZW50ICs9IGxpbmVDb250ZW50O1xuXHRcdFx0XHR9XG5cdFx0XHRcdGFkZGVkTGluZXMgKz0gbGluZXNSYW5nZSArIDE7XG5cblx0XHRcdFx0Y29uc3QgbGFzdExpbmVDb250ZW50ID0gZWRpdG9yLmdldExpbmUobGFzdExpbmUpO1xuXG5cdFx0XHRcdGNvbnN0IGxpbmVDb250ZW50MSA9IGxhc3RMaW5lQ29udGVudCArIFwiXFxuXCIgKyB0b3RhbENvbnRlbnQ7XG5cdFx0XHRcdGVkaXRvci5yZXBsYWNlUmFuZ2UoXG5cdFx0XHRcdFx0bGluZUNvbnRlbnQxLFxuXHRcdFx0XHRcdHsgbGluZTogbGFzdExpbmUsIGNoOiAwIH0sXG5cdFx0XHRcdFx0eyBsaW5lOiBsYXN0TGluZSwgY2g6IGxhc3RMaW5lQ29udGVudC5sZW5ndGggfVxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXHRcdFx0Ly90byBzZXQgc2VsZWN0aW9uIGJhY2tcblx0XHRcdHNlbGVjdGlvbnMucHVzaCh7XG5cdFx0XHRcdGFuY2hvcjogeyBsaW5lOiBhbmNob3IgKyBhZGRlZExpbmVzLCBjaDogYW5jaG9yQ2hhciB9LFxuXHRcdFx0XHRoZWFkOiB7IGxpbmU6IGhlYWQgKyBhZGRlZExpbmVzLCBjaDogaGVhZENoYXIgfSxcblx0XHRcdH0pO1xuXHRcdH0pO1xuXHRcdGVkaXRvci5zZXRTZWxlY3Rpb24oeyBsaW5lOiAwLCBjaDogMCB9LCB7IGxpbmU6IDAsIGNoOiAwIH0pOy8vZGVzZWxlY3QgYWxsXG5cdFx0ZWRpdG9yLnNldFNlbGVjdGlvbnMoc2VsZWN0aW9ucyk7XG5cdH1cbn1cblxuIl0sCiAgIm1hcHBpbmdzIjogIjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsc0JBQXVEO0FBRXZELElBQXFCLGlCQUFyQixjQUE0Qyx1QkFBTztBQUFBLEVBQ2xELEFBQU0sU0FBUztBQUFBO0FBQ2QsV0FBSyxXQUFXO0FBQUEsUUFDZixJQUFJO0FBQUEsUUFDSixNQUFNO0FBQUEsUUFDTixnQkFBZ0IsQ0FBQyxXQUFXLEtBQUssY0FBYyxNQUFNO0FBQUEsTUFDdEQsQ0FBQztBQUFBLElBQ0Y7QUFBQTtBQUFBLEVBQ0EsY0FBYyxRQUFnQjtBQUM3QixVQUFNLFVBQVUsT0FBTyxlQUFlO0FBQ3RDLFFBQUksYUFBYTtBQUNqQixVQUFNLGFBQXVDLENBQUM7QUFDOUMsWUFBUSxRQUFRLENBQUMsV0FBVztBQUMzQixVQUFJLGNBQWM7QUFDbEIsVUFBSSxhQUFhO0FBQ2pCLFlBQU0sT0FBTyxPQUFPLEtBQUs7QUFDekIsWUFBTSxTQUFTLE9BQU8sT0FBTztBQUM3QixZQUFNLFdBQVcsT0FBTyxLQUFLO0FBQzdCLFlBQU0sYUFBYSxPQUFPLE9BQU87QUFDakMsVUFBSSxRQUFRLFFBQVE7QUFDbkIscUJBQWEsT0FBTztBQUNwQixzQkFBYyxPQUFPLFFBQVEsVUFBVTtBQUN2QyxZQUFJLENBQUMsYUFBYTtBQUNqQjtBQUFBLFFBQ0Q7QUFDQTtBQUNBLGNBQU0sZUFBZSxjQUFjLE9BQU87QUFDMUMsZUFBTyxhQUNOLGNBQ0EsRUFBRSxNQUFNLFlBQVksSUFBSSxFQUFFLEdBQzFCLEVBQUUsTUFBTSxZQUFZLElBQUksWUFBWSxPQUFPLENBQzVDO0FBQUEsTUFDRCxPQUFPO0FBQ04sWUFBSSxlQUFlO0FBQ25CLGNBQU0sV0FBVyxLQUFLLElBQUksTUFBTSxNQUFNLElBQUk7QUFDMUMsY0FBTSxZQUFZLEtBQUssSUFBSSxNQUFNLE1BQU0sSUFBSTtBQUMzQyxjQUFNLGFBQWEsS0FBSyxJQUFJLE9BQU8sTUFBTTtBQUV6QyxpQkFBUyxJQUFJLEdBQUcsS0FBSyxZQUFZLEtBQUs7QUFDckMsZ0JBQU0sYUFBYSxZQUFZO0FBQy9CLHdCQUFjLE9BQU8sUUFBUSxVQUFVO0FBQ3ZDLGNBQUksTUFBTTtBQUFZLDRCQUFnQixjQUFjO0FBQUE7QUFDL0MsNEJBQWdCO0FBQUEsUUFDdEI7QUFDQSxzQkFBYyxhQUFhO0FBRTNCLGNBQU0sa0JBQWtCLE9BQU8sUUFBUSxRQUFRO0FBRS9DLGNBQU0sZUFBZSxrQkFBa0IsT0FBTztBQUM5QyxlQUFPLGFBQ04sY0FDQSxFQUFFLE1BQU0sVUFBVSxJQUFJLEVBQUUsR0FDeEIsRUFBRSxNQUFNLFVBQVUsSUFBSSxnQkFBZ0IsT0FBTyxDQUM5QztBQUFBLE1BQ0Q7QUFFQSxpQkFBVyxLQUFLO0FBQUEsUUFDZixRQUFRLEVBQUUsTUFBTSxTQUFTLFlBQVksSUFBSSxXQUFXO0FBQUEsUUFDcEQsTUFBTSxFQUFFLE1BQU0sT0FBTyxZQUFZLElBQUksU0FBUztBQUFBLE1BQy9DLENBQUM7QUFBQSxJQUNGLENBQUM7QUFDRCxXQUFPLGFBQWEsRUFBRSxNQUFNLEdBQUcsSUFBSSxFQUFFLEdBQUcsRUFBRSxNQUFNLEdBQUcsSUFBSSxFQUFFLENBQUM7QUFDMUQsV0FBTyxjQUFjLFVBQVU7QUFBQSxFQUNoQztBQUNEOyIsCiAgIm5hbWVzIjogW10KfQo=
